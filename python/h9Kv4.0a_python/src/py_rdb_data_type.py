# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_py_rdb_data_type')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_py_rdb_data_type')
    _py_rdb_data_type = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_py_rdb_data_type', [dirname(__file__)])
        except ImportError:
            import _py_rdb_data_type
            return _py_rdb_data_type
        try:
            _mod = imp.load_module('_py_rdb_data_type', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _py_rdb_data_type = swig_import_helper()
    del swig_import_helper
else:
    import _py_rdb_data_type
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ENTRY_FIXED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENTRY_FIXED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENTRY_FIXED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entryName"] = _py_rdb_data_type.ENTRY_FIXED_entryName_set
    __swig_getmethods__["entryName"] = _py_rdb_data_type.ENTRY_FIXED_entryName_get
    if _newclass:
        entryName = _swig_property(_py_rdb_data_type.ENTRY_FIXED_entryName_get, _py_rdb_data_type.ENTRY_FIXED_entryName_set)
    __swig_setmethods__["entryLongname"] = _py_rdb_data_type.ENTRY_FIXED_entryLongname_set
    __swig_getmethods__["entryLongname"] = _py_rdb_data_type.ENTRY_FIXED_entryLongname_get
    if _newclass:
        entryLongname = _swig_property(_py_rdb_data_type.ENTRY_FIXED_entryLongname_get, _py_rdb_data_type.ENTRY_FIXED_entryLongname_set)
    __swig_setmethods__["dsp_filename"] = _py_rdb_data_type.ENTRY_FIXED_dsp_filename_set
    __swig_getmethods__["dsp_filename"] = _py_rdb_data_type.ENTRY_FIXED_dsp_filename_get
    if _newclass:
        dsp_filename = _swig_property(_py_rdb_data_type.ENTRY_FIXED_dsp_filename_get, _py_rdb_data_type.ENTRY_FIXED_dsp_filename_set)
    __swig_setmethods__["hard_addr"] = _py_rdb_data_type.ENTRY_FIXED_hard_addr_set
    __swig_getmethods__["hard_addr"] = _py_rdb_data_type.ENTRY_FIXED_hard_addr_get
    if _newclass:
        hard_addr = _swig_property(_py_rdb_data_type.ENTRY_FIXED_hard_addr_get, _py_rdb_data_type.ENTRY_FIXED_hard_addr_set)
    __swig_setmethods__["io_group"] = _py_rdb_data_type.ENTRY_FIXED_io_group_set
    __swig_getmethods__["io_group"] = _py_rdb_data_type.ENTRY_FIXED_io_group_get
    if _newclass:
        io_group = _swig_property(_py_rdb_data_type.ENTRY_FIXED_io_group_get, _py_rdb_data_type.ENTRY_FIXED_io_group_set)
    __swig_setmethods__["iost"] = _py_rdb_data_type.ENTRY_FIXED_iost_set
    __swig_getmethods__["iost"] = _py_rdb_data_type.ENTRY_FIXED_iost_get
    if _newclass:
        iost = _swig_property(_py_rdb_data_type.ENTRY_FIXED_iost_get, _py_rdb_data_type.ENTRY_FIXED_iost_set)
    __swig_setmethods__["ioattr"] = _py_rdb_data_type.ENTRY_FIXED_ioattr_set
    __swig_getmethods__["ioattr"] = _py_rdb_data_type.ENTRY_FIXED_ioattr_get
    if _newclass:
        ioattr = _swig_property(_py_rdb_data_type.ENTRY_FIXED_ioattr_get, _py_rdb_data_type.ENTRY_FIXED_ioattr_set)
    __swig_setmethods__["pair_pt"] = _py_rdb_data_type.ENTRY_FIXED_pair_pt_set
    __swig_getmethods__["pair_pt"] = _py_rdb_data_type.ENTRY_FIXED_pair_pt_get
    if _newclass:
        pair_pt = _swig_property(_py_rdb_data_type.ENTRY_FIXED_pair_pt_get, _py_rdb_data_type.ENTRY_FIXED_pair_pt_set)
    __swig_setmethods__["ctrl_addr"] = _py_rdb_data_type.ENTRY_FIXED_ctrl_addr_set
    __swig_getmethods__["ctrl_addr"] = _py_rdb_data_type.ENTRY_FIXED_ctrl_addr_get
    if _newclass:
        ctrl_addr = _swig_property(_py_rdb_data_type.ENTRY_FIXED_ctrl_addr_get, _py_rdb_data_type.ENTRY_FIXED_ctrl_addr_set)
    __swig_setmethods__["msg_sel"] = _py_rdb_data_type.ENTRY_FIXED_msg_sel_set
    __swig_getmethods__["msg_sel"] = _py_rdb_data_type.ENTRY_FIXED_msg_sel_get
    if _newclass:
        msg_sel = _swig_property(_py_rdb_data_type.ENTRY_FIXED_msg_sel_get, _py_rdb_data_type.ENTRY_FIXED_msg_sel_set)
    __swig_setmethods__["update_src"] = _py_rdb_data_type.ENTRY_FIXED_update_src_set
    __swig_getmethods__["update_src"] = _py_rdb_data_type.ENTRY_FIXED_update_src_get
    if _newclass:
        update_src = _swig_property(_py_rdb_data_type.ENTRY_FIXED_update_src_get, _py_rdb_data_type.ENTRY_FIXED_update_src_set)
    __swig_setmethods__["hash_index"] = _py_rdb_data_type.ENTRY_FIXED_hash_index_set
    __swig_getmethods__["hash_index"] = _py_rdb_data_type.ENTRY_FIXED_hash_index_get
    if _newclass:
        hash_index = _swig_property(_py_rdb_data_type.ENTRY_FIXED_hash_index_get, _py_rdb_data_type.ENTRY_FIXED_hash_index_set)
    __swig_setmethods__["hash_next"] = _py_rdb_data_type.ENTRY_FIXED_hash_next_set
    __swig_getmethods__["hash_next"] = _py_rdb_data_type.ENTRY_FIXED_hash_next_get
    if _newclass:
        hash_next = _swig_property(_py_rdb_data_type.ENTRY_FIXED_hash_next_get, _py_rdb_data_type.ENTRY_FIXED_hash_next_set)
    __swig_setmethods__["hash_key"] = _py_rdb_data_type.ENTRY_FIXED_hash_key_set
    __swig_getmethods__["hash_key"] = _py_rdb_data_type.ENTRY_FIXED_hash_key_get
    if _newclass:
        hash_key = _swig_property(_py_rdb_data_type.ENTRY_FIXED_hash_key_get, _py_rdb_data_type.ENTRY_FIXED_hash_key_set)

    def __init__(self):
        this = _py_rdb_data_type.new_ENTRY_FIXED()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _py_rdb_data_type.delete_ENTRY_FIXED
    __del__ = lambda self: None
ENTRY_FIXED_swigregister = _py_rdb_data_type.ENTRY_FIXED_swigregister
ENTRY_FIXED_swigregister(ENTRY_FIXED)

class IOST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["viewPoint"] = _py_rdb_data_type.IOST_viewPoint_set
    __swig_getmethods__["viewPoint"] = _py_rdb_data_type.IOST_viewPoint_get
    if _newclass:
        viewPoint = _swig_property(_py_rdb_data_type.IOST_viewPoint_get, _py_rdb_data_type.IOST_viewPoint_set)
    __swig_setmethods__["res1"] = _py_rdb_data_type.IOST_res1_set
    __swig_getmethods__["res1"] = _py_rdb_data_type.IOST_res1_get
    if _newclass:
        res1 = _swig_property(_py_rdb_data_type.IOST_res1_get, _py_rdb_data_type.IOST_res1_set)
    __swig_setmethods__["scanEnable"] = _py_rdb_data_type.IOST_scanEnable_set
    __swig_getmethods__["scanEnable"] = _py_rdb_data_type.IOST_scanEnable_get
    if _newclass:
        scanEnable = _swig_property(_py_rdb_data_type.IOST_scanEnable_get, _py_rdb_data_type.IOST_scanEnable_set)
    __swig_setmethods__["almEnable"] = _py_rdb_data_type.IOST_almEnable_set
    __swig_getmethods__["almEnable"] = _py_rdb_data_type.IOST_almEnable_get
    if _newclass:
        almEnable = _swig_property(_py_rdb_data_type.IOST_almEnable_get, _py_rdb_data_type.IOST_almEnable_set)
    __swig_setmethods__["almNoAck"] = _py_rdb_data_type.IOST_almNoAck_set
    __swig_getmethods__["almNoAck"] = _py_rdb_data_type.IOST_almNoAck_get
    if _newclass:
        almNoAck = _swig_property(_py_rdb_data_type.IOST_almNoAck_get, _py_rdb_data_type.IOST_almNoAck_set)
    __swig_setmethods__["ctrlLock"] = _py_rdb_data_type.IOST_ctrlLock_set
    __swig_getmethods__["ctrlLock"] = _py_rdb_data_type.IOST_ctrlLock_get
    if _newclass:
        ctrlLock = _swig_property(_py_rdb_data_type.IOST_ctrlLock_get, _py_rdb_data_type.IOST_ctrlLock_set)
    __swig_setmethods__["noUpdate"] = _py_rdb_data_type.IOST_noUpdate_set
    __swig_getmethods__["noUpdate"] = _py_rdb_data_type.IOST_noUpdate_get
    if _newclass:
        noUpdate = _swig_property(_py_rdb_data_type.IOST_noUpdate_get, _py_rdb_data_type.IOST_noUpdate_set)
    __swig_setmethods__["almRepeat"] = _py_rdb_data_type.IOST_almRepeat_set
    __swig_getmethods__["almRepeat"] = _py_rdb_data_type.IOST_almRepeat_get
    if _newclass:
        almRepeat = _swig_property(_py_rdb_data_type.IOST_almRepeat_get, _py_rdb_data_type.IOST_almRepeat_set)
    __swig_setmethods__["res2"] = _py_rdb_data_type.IOST_res2_set
    __swig_getmethods__["res2"] = _py_rdb_data_type.IOST_res2_get
    if _newclass:
        res2 = _swig_property(_py_rdb_data_type.IOST_res2_get, _py_rdb_data_type.IOST_res2_set)
    __swig_setmethods__["tagState"] = _py_rdb_data_type.IOST_tagState_set
    __swig_getmethods__["tagState"] = _py_rdb_data_type.IOST_tagState_get
    if _newclass:
        tagState = _swig_property(_py_rdb_data_type.IOST_tagState_get, _py_rdb_data_type.IOST_tagState_set)
    __swig_setmethods__["res3"] = _py_rdb_data_type.IOST_res3_set
    __swig_getmethods__["res3"] = _py_rdb_data_type.IOST_res3_get
    if _newclass:
        res3 = _swig_property(_py_rdb_data_type.IOST_res3_get, _py_rdb_data_type.IOST_res3_set)

    def __init__(self):
        this = _py_rdb_data_type.new_IOST()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _py_rdb_data_type.delete_IOST
    __del__ = lambda self: None
IOST_swigregister = _py_rdb_data_type.IOST_swigregister
IOST_swigregister(IOST)

class DMS_COMMON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMS_COMMON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMS_COMMON, name)
    __repr__ = _swig_repr
    __swig_setmethods__["point"] = _py_rdb_data_type.DMS_COMMON_point_set
    __swig_getmethods__["point"] = _py_rdb_data_type.DMS_COMMON_point_get
    if _newclass:
        point = _swig_property(_py_rdb_data_type.DMS_COMMON_point_get, _py_rdb_data_type.DMS_COMMON_point_set)
    __swig_setmethods__["fixed"] = _py_rdb_data_type.DMS_COMMON_fixed_set
    __swig_getmethods__["fixed"] = _py_rdb_data_type.DMS_COMMON_fixed_get
    if _newclass:
        fixed = _swig_property(_py_rdb_data_type.DMS_COMMON_fixed_get, _py_rdb_data_type.DMS_COMMON_fixed_set)
    __swig_setmethods__["var"] = _py_rdb_data_type.DMS_COMMON_var_set
    __swig_getmethods__["var"] = _py_rdb_data_type.DMS_COMMON_var_get
    if _newclass:
        var = _swig_property(_py_rdb_data_type.DMS_COMMON_var_get, _py_rdb_data_type.DMS_COMMON_var_set)

    def __init__(self):
        this = _py_rdb_data_type.new_DMS_COMMON()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _py_rdb_data_type.delete_DMS_COMMON
    __del__ = lambda self: None
DMS_COMMON_swigregister = _py_rdb_data_type.DMS_COMMON_swigregister
DMS_COMMON_swigregister(DMS_COMMON)

RW_D_BAND = _py_rdb_data_type.RW_D_BAND
RW_HI_ALARM = _py_rdb_data_type.RW_HI_ALARM
RW_HI_WARN = _py_rdb_data_type.RW_HI_WARN
RW_LO_WARN = _py_rdb_data_type.RW_LO_WARN
RW_LO_ALARM = _py_rdb_data_type.RW_LO_ALARM
RW_HI_RECOVER = _py_rdb_data_type.RW_HI_RECOVER
RW_LO_RECOVER = _py_rdb_data_type.RW_LO_RECOVER
RW_ENG_CVT = _py_rdb_data_type.RW_ENG_CVT
RW_HI_RANGE = _py_rdb_data_type.RW_HI_RANGE
RW_LO_RANGE = _py_rdb_data_type.RW_LO_RANGE
RW_ZERO = _py_rdb_data_type.RW_ZERO
RW_COMPSATE = _py_rdb_data_type.RW_COMPSATE
RW_HI_CODE = _py_rdb_data_type.RW_HI_CODE
RW_LO_CODE = _py_rdb_data_type.RW_LO_CODE
RW_TR_WARN = _py_rdb_data_type.RW_TR_WARN
RW_TR_RECOVER = _py_rdb_data_type.RW_TR_RECOVER
class POINTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, POINTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, POINTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stn_id"] = _py_rdb_data_type.POINTER_stn_id_set
    __swig_getmethods__["stn_id"] = _py_rdb_data_type.POINTER_stn_id_get
    if _newclass:
        stn_id = _swig_property(_py_rdb_data_type.POINTER_stn_id_get, _py_rdb_data_type.POINTER_stn_id_set)
    __swig_setmethods__["dev_id"] = _py_rdb_data_type.POINTER_dev_id_set
    __swig_getmethods__["dev_id"] = _py_rdb_data_type.POINTER_dev_id_get
    if _newclass:
        dev_id = _swig_property(_py_rdb_data_type.POINTER_dev_id_get, _py_rdb_data_type.POINTER_dev_id_set)
    __swig_setmethods__["data_type"] = _py_rdb_data_type.POINTER_data_type_set
    __swig_getmethods__["data_type"] = _py_rdb_data_type.POINTER_data_type_get
    if _newclass:
        data_type = _swig_property(_py_rdb_data_type.POINTER_data_type_get, _py_rdb_data_type.POINTER_data_type_set)
    __swig_setmethods__["update_src"] = _py_rdb_data_type.POINTER_update_src_set
    __swig_getmethods__["update_src"] = _py_rdb_data_type.POINTER_update_src_get
    if _newclass:
        update_src = _swig_property(_py_rdb_data_type.POINTER_update_src_get, _py_rdb_data_type.POINTER_update_src_set)
    __swig_setmethods__["pt_id"] = _py_rdb_data_type.POINTER_pt_id_set
    __swig_getmethods__["pt_id"] = _py_rdb_data_type.POINTER_pt_id_get
    if _newclass:
        pt_id = _swig_property(_py_rdb_data_type.POINTER_pt_id_get, _py_rdb_data_type.POINTER_pt_id_set)

    def __init__(self):
        this = _py_rdb_data_type.new_POINTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _py_rdb_data_type.delete_POINTER
    __del__ = lambda self: None
POINTER_swigregister = _py_rdb_data_type.POINTER_swigregister
POINTER_swigregister(POINTER)

# This file is compatible with both classic and new-style classes.


